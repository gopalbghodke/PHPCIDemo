image: brunoocto/lincko_back:latest

# Jobs to be taken into account by the CI
stages:
  - test
  - report
  - tag
  - tags

# Run PHPunit and generate report for tags
ut_tags:
  stage: tags
  tags:
    - docker
  cache:
    paths:
      - vendor/
  before_script:
    # SSH login
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    - mkdir -p ~/.ssh
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
    - chmod 400 ~/.ssh/id_rsa
    - ssh-add ~/.ssh/id_rsa
    - if [[ -e /.dockerenv ]]; then echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config; fi;
    # Copy PHP configuration (for test only)
    - echo "$TEST_INI" > /etc/php/7.3/apache2/conf.d/50-test.ini
    - echo "$TEST_INI" > /etc/php/7.3/cli/conf.d/50-test.ini
  script:
    - cd $CI_PROJECT_DIR
    # Avoid an error because the folder does not exists
    - mkdir ./packages
    - composer install
    - phpunit8 --coverage-text --colors=never --configuration phpunit.xml
  only:
    - tags

# Run PHPunit and generate report
ut_branches:
  stage: test
  tags:
    - docker
  cache:
    paths:
      - vendor/
  before_script:
    # SSH login
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    - mkdir -p ~/.ssh
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
    - chmod 400 ~/.ssh/id_rsa
    - ssh-add ~/.ssh/id_rsa
    - if [[ -e /.dockerenv ]]; then echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config; fi;
    # Copy PHP configuration (for test only)
    - echo "$TEST_INI" > /etc/php/7.3/apache2/conf.d/50-test.ini
    - echo "$TEST_INI" > /etc/php/7.3/cli/conf.d/50-test.ini
  script:
    - cd $CI_PROJECT_DIR
    # Avoid an error because the folder does not exists
    - mkdir ./packages
    - composer install
    - phpunit8 --coverage-text --colors=never --configuration phpunit.xml
  artifacts:
    when: always
    expire_in: 1 days
    paths:
      - reports
  only:
    - branches

# Publish report on "pages" feature of Gitlab
pages:
  stage: report
  tags:
    - docker
  dependencies:
    - ut_branches
  script:
    - mv reports/ public/
  artifacts:
    paths:
      - public
    expire_in: 4 weeks
  only:
    - branches

# Generate a new tag syncrhonized with comnposer.json information
tag_creation:
  stage: tag
  tags:
    - docker
  dependencies:
    - ut_branches
  script:
    # SSH login
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    - mkdir -p ~/.ssh
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
    - chmod 400 ~/.ssh/id_rsa
    - ssh-add ~/.ssh/id_rsa
    - if [[ -e /.dockerenv ]]; then echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config; fi
    # Enable git remote operation
    - git remote set-url origin git@gitlab.com:${CI_PROJECT_PATH}.git
    # Grab and push version number
    - cd $CI_PROJECT_DIR
    - >
      tag_version=$(cat composer.json | grep -oP '(?<="version": ")v?[\d.]+(?=",)');
      if [ -z ${tag_version} ];
      then
        echo "Missing version number in composer, or wrong format.";
        exit 1;
      fi;
    # Create the tag if it does not exists
    - >
      if [ -z "$(git tag -l ${tag_version})" ];
      then
        git tag -a ${tag_version} -m "Version ${tag_version}";
      fi;
    # Push the tag if it does not exists remotely
    - >
      if [ -z "$(git ls-remote origin refs/tags/${tag_version})" ];
      then
        git push origin ${tag_version};
      fi;
  only:
    - branches
